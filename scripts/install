#!/usr/bin/env bash

. "$EXVM_ROOT/scripts/load_functions"

ELIXIR_SOURCE_URL="https://github.com/elixir-lang/elixir.git"
# You can set ELIXIR_SOURCE_PROXY_URL to improve the speed of downloading
# export ELIXIR_SOURCE_PROXY_URL=https://gitee.com/mirrors/elixir.git

function show_install_usage() {
    echo ""
	exvm_message "Usage: exvm install [version] [options]"
	exvm_message "    -s,  --source=SOURCE      Install Elixir from specified source."
	exvm_message "    -h,  --help               Display this message."
    echo ""
    echo ""
}


read_command_line() {
    exvm_dev_info "The parameters of install: $@ , count: $# "

    if [[ $# -eq 0 ]]; then
        show_install_usage
        exit 65 # Bad arguments
    fi

    if [[ $1 = "-h" || $1 = "--help" ]]; then
        show_install_usage
        exit 0
    fi

	VERSION=$1
	if [[ "${VERSION:0:1}" != "-" ]]; then
		shift
	else
		exvm_warn "Invalid version: $1"
		show_install_usage
		exit 1
	fi

	for i in "$@"; do
		case $i in
			-s=*|--source=*)
				ELIXIR_SOURCE_URL=$(echo "$i" | sed 's/[-a-zA-Z0-9]*=//')
			;;
			*)
				exvm_warn "Invalid option $i"
				show_install_usage
				exit 65 # Bad arguments
			;;
		esac
	done
}

download_elixir_source_code() {
    ELIXIR_CACHE_PATH=$EXVM_ROOT/archive/elixir
    
    # only for local development, remember to export EXVM_DEV env variable
    [[ -n $EXVM_DEV && -d ~/.exvm_archive.back && -d $EXVM_ROOT/archive ]] && rm -rf $EXVM_ROOT/archive
    [[ -n $EXVM_DEV && -d ~/.exvm_archive.back ]] && cp -rp ~/.exvm_archive.back $EXVM_ROOT/archive && return

    exvm_dev_info "download_elixir_source_code"

    [[ ! -d $EXVM_ROOT/archive ]] && mkdir -p $EXVM_ROOT/archive
	[[ -d $ELIXIR_CACHE_PATH ]] && return
    [[ -n $ELIXIR_SOURCE_PROXY_URL ]] && ELIXIR_SOURCE_URL=$ELIXIR_SOURCE_PROXY_URL
	
    exvm_message "Downloading Elixir source code..."
	git clone "$ELIXIR_SOURCE_URL" "$ELIXIR_CACHE_PATH" >> "$EXVM_ROOT/logs/elixir-download.log"  2>&1 ||
		exvm_error "Couldn't download Elixir source code. Check the logs $EXVM_ROOT/logs/elixir-download.log"
}

check_elixir_tag() {
    exvm_dev_info "VERSION: $VERSION"
    version=$(cd $ELIXIR_CACHE_PATH && git show-ref --heads --tags | awk -F/ '{ print $NF }' | $SORT_PATH | $GREP_PATH "$VERSION" | $HEAD_PATH -n 1 | $GREP_PATH "$VERSION")
}

update_elixir_source_code() {
	exvm_message "Updating Elixir source..."
	(cd "$ELIXIR_CACHE_PATH" && git pull >> "$EXVM_ROOT/logs/elixir-download.log" 2>&1 ||
		exvm_error "Couldn't get latest Elixir version info. Check the logs $EXVM_ROOT/logs/elixir-download.log")
}

copy_elixir_source() {
	git clone -b "$ELIXIR_VERSION" "$ELIXIR_CACHE_PATH" "$ELIXIR_INSTALL_ROOT" >> "$EXVM_ROOT/logs/elixir-$ELIXIR_VERSION-install.log" 2>&1 ||
		exvm_error "Couldn't copy source to target folder. Check the logs $EXVM_ROOT/logs/elixir-$ELIXIR_VERSION-install.log"
}

compile_elixir() {
	exvm_message " * Compiling, maybe it will take couples of minutes..."
	if [ ! -f "$ELIXIR_INSTALL_ROOT/VERSION" ]; then echo "$ELIXIR_VERSION" > "$ELIXIR_INSTALL_ROOT/VERSION"; fi &&
    if [[ -n $EXVM_DEV ]]; then
        cd "$ELIXIR_INSTALL_ROOT" && make clean test
        if [[ $? -ne 0 ]]; then
            rm -rf "$ELIXIR_INSTALL_ROOT" && exvm_fatal "Failed to compile, Please go to check the logs."
        fi
    else
	    cd "$ELIXIR_INSTALL_ROOT" && make clean test &> "$EXVM_ROOT/logs/elixir-$ELIXIR_VERSION-compile.log"
	    if [[ $? -ne 0 ]]; then
            rm -rf "$ELIXIR_INSTALL_ROOT" && exvm_fatal "Failed to compile. Check the logs at $EXVM_ROOT/logs/elixir-$ELIXIR_VERSION-compile.log"
        fi
    fi
}

check_kerl_if_exists() {
	command -v kerl &> /dev/null
}


# check if the erlang language exists in your system.
# The only prerequisite for Elixir is Erlang, version 21.0 or later.
check_erlang_if_exists() {
	command -v erl &> /dev/null

	if [[ $? -ne 0 ]]; then
		error_message="
		Could not find erl, please install it on your system.
		"
		exvm_error "$error_message"
		exit 1
	fi
}

erlang_current_version () {
	command erl -eval '{ok, Version} = file:read_file(filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])), io:fwrite(Version), halt().' -noshell
}

install_elixir() {
	ELIXIR_INSTALL_ROOT=$EXVM_ROOT/elixirs/$ELIXIR_VERSION
	trap 'rm -rf $ELIXIR_INSTALL_ROOT; exvm_fatal "Cancelled!"' INT

	# # Check for existing install
	# if [[ -d "$ELIXIR_INSTALL_ROOT" ]]; then
	# 	if [[ -f "$ELIXIR_INSTALL_ROOT/manifest" ]]; then
	# 		exvm_message "elixir $ELIXIR_VERSION has already been installed!"
	# 		exit 0
	# 	fi
	# 	exvm_warn "Removing corrupt install..."
	# 	exvm uninstall "$ELIXIR_VERSION"
	# fi

	exvm_message "Installing Elixir $version..."

	check_kerl_if_exists
	if [[ $? -ne 0 ]]; then
		exvm_dev_info "going to install kerl..."
		KERL_HOME=~/.kerl
		KERL_BIN=$KERL_HOME/bin
		mkdir -p $KERL_BIN

		# Download kerl target file into KERL_BIN directory
		curl -o $KERL_BIN/kerl -O https://raw.githubusercontent.com/kerl/kerl/master/kerl
		[[ -f $KERL_BIN/kerl ]] && chmod a+x $KERL_BIN/kerl
	fi

	check_erlang_if_exists

	copy_elixir_source

	# compile_elixir
    
    echo "export PATH=$PATH:$ELIXIR_INSTALL_ROOT/bin:$KERL_BIN" >> "$EXVM_ROOT/scripts/exvm"
    exvm_success_echo ""
    exvm_success_echo ""
    exvm_success_echo "Congratulations! Elixir $ELIXIR_VERSION has been installed successfully!"
    exvm_success_echo "Please restart your terminal session, or to get started execute the following command to make it effective."
    exvm_success_echo ""
    exvm_success_echo "  \`source ${EXVM_ROOT}/scripts/exvm\`  "
    exvm_success_echo ""
}

install_elixir_from_repository() {
	download_elixir_source_code

	check_elixir_tag

	if [[ $? -ne 0 ]]; then
		update_elixir_source_code
		check_elixir_tag || exvm_warn "Unrecognized Elixir version" && return
	fi

    ELIXIR_VERSION=$version
	install_elixir
}

main() {
	trap 'exvm_warn "Canceled!"' INT
	read_command_line $@
	[[ "$VERSION" == "" ]] && exvm_warn "No version specified"
    exvm_dev_info "going to install the elixir version: $VERSION"

	install_elixir_from_repository
}

main $@
